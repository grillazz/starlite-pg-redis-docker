[tool.poetry]
name = "starlite-pg-redis-docker"
version = "0.1.0"
description = "An example Starlite application with Redis, Postgres and Docker"
authors = []
packages = [{include = "app" }]
license = "MIT"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
alembic = "*"
asyncpg = "*"
httpx = "*"
pydantic = "*"
redis = "*"
sentry-sdk = "*"
sqlalchemy = { git = "https://github.com/sqlalchemy/sqlalchemy.git", branch = "main" }
starlite = "*"
uvicorn = { extras = ["standard"], version = "*" }
uvloop = "*"

[tool.poetry.dev-dependencies]
pre-commit = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-dotenv = "*"
starlite = { extras = ["full"], version = "*" }
types-redis = "*"
types-requests = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.coverage.report]
show_missing = true
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover',
    "if __name__ == '__main__':",
]

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = "--cov=app -v --doctest-modules --doctest-glob=*.md --ignore=alembic"
asyncio_mode = "auto"
env_files = [".env.example"]

[tool.pylint.MESSAGE_CONTROL]
disable = [
    "line-too-long",
    "invalid-name",
    "missing-class-docstring",
    "missing-module-docstring",
    "too-few-public-methods",
    "duplicate-code",
]
enable = "useless-suppression"
extension-pkg-allow-list = ["pydantic","asyncpg.pgproto.pgproto"]

[tool.pylint.VARIABLES]
ignored-argument-names = "args|kwargs|_|__"

[tool.pylint.BASIC]
good-names = "_,__,i,e,k,v,fn,get,post,put,patch,delete,route,asgi,websocket,Dependency,Body,Parameter"
# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx="(__.*__|main|test.*|.*test|.*Test|^_.*)$"

[tool.pylint.REPORTS]
reports = "no"

[tool.pylint.FORMAT]
max-line-length = "120"

[tool.pylint.LOGGING]
# Logging modules to check that the string format arguments are in logging
# function parameter format
logging-modules=["logging","picologging"]
